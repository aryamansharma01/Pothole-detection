# -*- coding: utf-8 -*-
"""inference (1).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ajr3V51crvx5mZDdXdpiT9EgIpO13KVy

<h2 align=center> <b>MaskRCNN using Tensorflow Object Detection API (TF Version 2) </h2>

<table align="left"><td>
  <a target="_blank"  href="https://drive.google.com/file/d/1GCRuIeITMT69MZGlOIg8STZriGZgKvSV/view?usp=sharing">
    <img src="https://www.tensorflow.org/images/colab_logo_32px.png" />Run in Google Colab
  </a>
</td><td>

  <a target="_blank"  href="https://github.com/NyanSwanAung/Pothole-Detection-using-MaskRCNN/tree/main/inference/inference.ipynb">
    <img width=32px src="https://www.tensorflow.org/images/GitHub-Mark-32px.png" />View source on GitHub</a>
</td></table>

Using pre-trained model to identify potholes in live webcam and videos. The model was trained on [COCO2017](https://cocodataset.org/) and fine-tuned with pothole dataset from this [kaggle dataset](https://www.kaggle.com/atulyakumar98/pothole-detection-dataset).

This pre-trained model is taken from [TensorFlow2 Object Detection Model Zoo](https://github.com/tensorflow/models/blob/master/research/object_detection/g3doc/tf2_detection_zoo.md)

# Prepare prerequisite

### Install TensorFlow Object Detection API
"""

# Commented out IPython magic to ensure Python compatibility.
#from IPython.display import clear_output

# # # API Installation 
# !sudo apt install -y protobuf-compiler
# !cd models/research
# !protoc object_detection/protos/*.proto --python_out=.
# !cp object_detection/packages/tf2/setup.py .
# !python -m pip install .

# !cd ..

# """### Import Dependencies"""

# !pip install opencv-python-headless==4.1.2.30
import numpy as np
import cv2
import os
import sys
import time
import tensorflow as tf
import math
import pathlib
import math
from collections import defaultdict
from io import StringIO
from matplotlib import pyplot as plt
from PIL import Image
from IPython.display import display

from IPython.display import HTML
from base64 import b64encode
import time

"""Import the object detection module."""

from object_detection.utils import ops as utils_ops
from object_detection.utils import label_map_util
from object_detection.utils import visualization_utils as vis_util

"""### Download my pre-trained inference graph or import yours

### Download test dataset and label map from github release page

# Model preparation

## Setup Paths
"""

IG_PATH = 'inference_graph'
LABEL_MAP_PATH = 'label.pbtxt'
TEST_IMG_DIR = 'test'
TEST_VID_DIR = 'test/test_vid.mp4'

"""## Load Model"""

def load_model():
    print("------LOADING MODEL------\n")
    start = time.time()
    model_dir = IG_PATH
    model_dir = pathlib.Path(model_dir)/"saved_model"
    model = tf.saved_model.load(str(model_dir))
    end = time.time()
    total = math.ceil(end-start)
    print(f'It took {total}s to load model')
    return model

"""## Loading label map and test dataset"""

# List of the strings that is used to add correct label for each box.
category_index = label_map_util.create_category_index_from_labelmap(LABEL_MAP_PATH, use_display_name=True)

"""For the sake of simplicity we will test on 2 images:"""

# If you want to test the code with your images, just add path to the images to the TEST_IMAGE_PATHS.
PATH_TO_TEST_IMAGES_DIR = pathlib.Path(TEST_IMG_DIR)
TEST_IMAGE_PATHS = sorted(list(PATH_TO_TEST_IMAGES_DIR.glob("*.jpg")))

"""# Detection

Load an object detection model:
"""

detection_model = load_model()

def run_inference_for_single_image(model, image):
    
    image = np.asarray(image)
    
    # The input needs to be a tensor, convert it using `tf.convert_to_tensor`.
    input_tensor = tf.convert_to_tensor(image)
    
    # The model expects a batch of images, so add an axis with `tf.newaxis`.
    input_tensor = input_tensor[tf.newaxis, ...]
    
    # Run inference
    model_fn = model.signatures['serving_default']
    output_dict = model_fn(input_tensor)
    
    # All outputs are batches tensors.
    # Convert to numpy arrays, and take index [0] to remove the batch dimension.
    # We're only interested in the first num_detections.
    
    num_detections = int(output_dict.pop('num_detections'))
    need_detection_key = ['detection_classes','detection_boxes','detection_masks','detection_scores']
    output_dict = {key: output_dict[key][0, :num_detections].numpy()
                   for key in need_detection_key}
    
    output_dict['num_detections'] = num_detections
    
    # detection_classes should be ints.
    output_dict['detection_classes'] = output_dict['detection_classes'].astype(np.int64)
    
    # Handle models with masks:
    if 'detection_masks' in output_dict:
        # Reframe the the bbox mask to the image size.
        detection_masks_reframed = utils_ops.reframe_box_masks_to_image_masks(
            tf.convert_to_tensor(output_dict['detection_masks']), output_dict['detection_boxes'],
            image.shape[0], image.shape[1])
        detection_masks_reframed = tf.cast(detection_masks_reframed > 0.5,
                                           tf.uint8)
        output_dict['detection_masks_reframed'] = detection_masks_reframed.numpy()

    return output_dict

def run_inference_image(model, image_path):
  
  start = time.time()
  
  # the array based representation of the image will be used later in order to prepare the
  # result image with boxes and labels on it.
  image_np = np.array(Image.open(image_path))
  
  # Actual detection.
  output_dict = run_inference_for_single_image(model, image_np)
  
  # Visualization of the results of a detection.
  vis_util.visualize_boxes_and_labels_on_image_array(
      image_np,
      output_dict['detection_boxes'],
      output_dict['detection_classes'],
      output_dict['detection_scores'],
      category_index,
      instance_masks=output_dict.get('detection_masks_reframed', True),
      use_normalized_coordinates=True,
      line_thickness=5)
   
  end = time.time()
  num = output_dict['num_detections']
  total = math.ceil(end-start)
  img = Image.fromarray(image_np)
  img.show()
  #print(f'It took {total}s for above image')

"""# Inference"""

# Inference on Image
for image_path in TEST_IMAGE_PATHS:
  run_inference_image(detection_model, image_path)
